name: 部署 AI 服务到云服务器
# 触发条件：推送到 main 分支时执行
on:
  push:
    branches: [ "main" ]

jobs:
  deploy-ai-service:
    runs-on: ubuntu-latest # 运行环境：Ubuntu 最新版
    steps:
      # 1. 拉取 GitHub 仓库代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 配置 Python 环境（AI 项目常用）
      - name: 设置 Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10" # 匹配你的 AI 项目 Python 版本

      # 3. 安装依赖（需提前在项目根目录创建 requirements.txt）
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # 需包含 torch/transformers/fastapi 等 AI 库

      # 4. （可选）缓存 AI 模型（避免每次下载大模型，加速部署）
      - name: 缓存 HuggingFace 模型
        uses: actions/cache@v3
        with:
          path: ~/.cache/huggingface # 模型默认缓存路径
          key: ${{ runner.os }}-huggingface-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-huggingface-

      # 5. 部署到云服务器（通过 SSH 连接，需提前配置 Secrets）
      - name: SSH 连接并启动 AI 服务
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }} # 服务器 IP（在 GitHub 仓库 -> Settings -> Secrets 配置）
          username: ${{ secrets.SERVER_USER }} # 服务器用户名
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 私钥
          script: |
            # 进入服务器项目目录
            cd /path/to/your/ai/project
            # 拉取最新代码（若服务器已克隆仓库）
            git pull
            # 安装依赖（与步骤 3 一致）
            pip install -r requirements.txt
            # 停止旧服务（避免端口占用）
            pkill -f "uvicorn main:app" || true
            # 后台启动 AI 服务（以 FastAPI 的 uvicorn 为例）
            nohup uvicorn main:app --host 0.0.0.0 --port 8000 &
